{"version":3,"sources":["../src/plugin.js"],"names":["marksPlugin","tree","console","log","marks","parseMarks","updated","withMarkIds","marskHeaderIndex","findMarksHeaderIndex","hasMarksSection","list","createList","children","splice","node","isMark","push","text","markRegex","test","findIndex","isHeader","type","textVal","value","toLowerCase","hasMarks","length","withoutColon","mark","slice","link","replace","ordered","spread","start","map","checked","url","title","res","data","hProperties","id"],"mappings":"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","sourcesContent":["import visit from 'unist-util-visit'\nimport toString from 'mdast-util-to-string'\nimport map from 'unist-util-map'\n\n// This is a remark plugin, so it receives the tree\nexport function marksPlugin() {\n  return tree => {\n    console.log(tree)\n    const marks = parseMarks(tree)\n    const updated = withMarkIds(tree, marks)\n    const marskHeaderIndex = findMarksHeaderIndex(tree)\n\n    const hasMarksSection = marskHeaderIndex !== -1\n    if (!hasMarksSection) {\n      return\n    }\n\n    const list = createList(marks)\n    if (!list) {\n      return\n    }\n\n    console.log('tree', tree)\n    updated.children.splice(marskHeaderIndex + 1, 0, list)\n    tree.children = updated.children\n    console.log('updated', updated)\n  }\n\n  // Find position for mark\n  // Array.from(document.querySelectorAll('strong')).find( el => el.textContent === 'mark:').offsetTop\n\n  // Scroll to mark\n  // const preview = document.querySelector('.mde-preview')\n  // preview.scrollTop(mark.offsetTop)\n}\n\nfunction parseMarks(tree) {\n  const marks = []\n\n  visit(tree, 'strong', node => {\n    if (isMark(node)) {\n      marks.push(toString(node))\n    }\n  })\n\n  return marks\n}\n\nfunction isMark(node) {\n  // Use toString() util in case node contains other markup (ie. links)\n  const text = toString(node)\n  const markRegex = /.*\\:$/\n  return markRegex.test(text)\n}\n\nfunction findMarksHeaderIndex(tree) {\n  return tree.children.findIndex(node => {\n    const isHeader = node.type === 'heading'\n    if (!isHeader) {\n      return\n    }\n\n    const textVal = node.children[0].value.toLowerCase()\n\n    return textVal === 'marks'\n  })\n}\n\nfunction createList(marks) {\n  const hasMarks = marks.length > 0\n  if (!hasMarks) {\n    return null\n  }\n\n  const withoutColon = mark => mark.slice(0, -1)\n  const link = mark =>\n    `#${mark\n      .toLowerCase()\n      .replace(/ /g, '')\n      .slice(0, -1)}`\n\n  const list = {\n    type: 'list',\n    ordered: false,\n    spread: false,\n    start: null,\n    children: marks.map(mark => ({\n      type: 'listItem',\n      checked: null,\n      children: [\n        {\n          type: 'paragraph',\n          children: [\n            {\n              type: 'link',\n              url: link(mark),\n              title: null,\n              children: [\n                {\n                  type: 'text',\n                  value: withoutColon(mark)\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }))\n  }\n\n  return list\n}\n\nfunction withMarkIds(tree) {\n  const res = map(tree, node => {\n    if (isMark(node)) {\n      return {\n        ...node,\n        data: {\n          hProperties: {\n            id: `${toString(node)\n              .toLowerCase()\n              .replace(/ /g, '')\n              .slice(0, -1)}`\n          },\n          id: `${toString(node)\n            .toLowerCase()\n            .replace(/ /g, '')\n            .slice(0, -1)}`\n        }\n      }\n    }\n\n    return node\n  })\n\n  console.log('result', res)\n  return res\n}\n"],"file":"plugin.js"}
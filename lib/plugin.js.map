{"version":3,"sources":["../src/plugin.js"],"names":["marksPlugin","tree","marks","parseMarks","console","log","marskHeaderIndex","findMarksHeaderIndex","hasMarksSection","list","createList","children","splice","node","text","markRegex","isMark","test","push","findIndex","isHeader","type","textVal","value","toLowerCase","hasMarks","length","link","mark","trim","withoutColon","slice","ordered","spread","start","map","checked","url","title"],"mappings":"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","sourcesContent":["import visit from 'unist-util-visit'\nimport toString from 'mdast-util-to-string'\n\n// This is a remark plugin, so it receives the tree\nexport function marksPlugin() {\n  return tree => {\n    const marks = parseMarks(tree)\n    console.log('marks', marks)\n    console.log('tree', tree)\n\n    const marskHeaderIndex = findMarksHeaderIndex(tree)\n\n    const hasMarksSection = marskHeaderIndex !== -1\n    if (!hasMarksSection) {\n      return\n    }\n\n    const list = createList(marks)\n    if (!list) {\n      return\n    }\n\n    tree.children.splice(marskHeaderIndex + 1, 0, list)\n  }\n\n  // Find position for mark\n  // Array.from(document.querySelectorAll('strong')).find( el => el.textContent === 'mark:').offsetTop\n\n  // Scroll to mark\n  // const preview = document.querySelector('.mde-preview')\n  // preview.scrollTop(mark.offsetTop)\n}\n\nfunction parseMarks(tree) {\n  const marks = []\n\n  visit(tree, 'strong', node => {\n    // Use toString() util in case node contains other markup (ie. links)\n    const text = toString(node)\n    const markRegex = /.*\\:$/\n\n    const isMark = markRegex.test(text)\n\n    if (isMark) {\n      marks.push(text)\n    }\n  })\n\n  return marks\n}\n\nfunction findMarksHeaderIndex(tree) {\n  return tree.children.findIndex(node => {\n    const isHeader = node.type === 'heading'\n    if (!isHeader) {\n      return\n    }\n\n    const textVal = node.children[0].value.toLowerCase()\n\n    return textVal === 'marks'\n  })\n}\n\nfunction createList(marks) {\n  const hasMarks = marks.length > 0\n  if (!hasMarks) {\n    return null\n  }\n\n  const link = mark => `#mark__${mark.trim()}`\n  const withoutColon = mark => mark.slice(0, -1)\n\n  const list = {\n    type: 'list',\n    ordered: false,\n    spread: false,\n    start: null,\n    children: marks.map(mark => ({\n      type: 'listItem',\n      checked: null,\n      children: [\n        {\n          type: 'paragraph',\n          children: [\n            {\n              type: 'link',\n              url: link(mark),\n              title: null,\n              children: [\n                {\n                  type: 'text',\n                  value: withoutColon(mark)\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }))\n  }\n\n  return list\n}\n"],"file":"plugin.js"}
{"version":3,"sources":["../src/marks.js"],"names":["createMarks","tree","createList","parseMarks","marks","counter","node","hasMarks","Object","keys","length","createMarksList","list","type","children","entries","map","mark","number","url","title","value","isMark","withMarkIds","res","id","data","hProperties"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEO,MAAMA,WAAW,GAAGC,IAAI,IAAIC,UAAU,CAACC,UAAU,CAACF,IAAD,CAAX,CAAtC;;;;AAEA,SAASE,UAAT,CAAoBF,IAApB,EAA0B;AAC/B;AACA;AACA;AACA,QAAMG,KAAK,GAAG,EAAd;AACA,MAAIC,OAAO,GAAG,CAAd;AAEA,+BAAMJ,IAAN,EAAY,MAAZ,EAAoBK,IAAI,IAAI;AAC1BF,IAAAA,KAAK,CAAC,gCAASE,IAAT,CAAD,CAAL,GAAwBD,OAAxB;AACAA,IAAAA,OAAO;AACR,GAHD;AAKA,SAAOD,KAAP;AACD;;AAEM,SAASG,QAAT,CAAkBH,KAAlB,EAAyB;AAC9B,SAAOI,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,MAAnB,GAA4B,CAAnC;AACD;;AAEM,SAASC,eAAT,CAAyBP,KAAzB,EAAgC;AACrC,QAAMQ,IAAI,GAAG;AACXC,IAAAA,IAAI,EAAE,WADK;AAEXC,IAAAA,QAAQ,EAAEN,MAAM,CAACO,OAAP,CAAeX,KAAf,EAAsBY,GAAtB,CAA0B,CAAC,CAACC,IAAD,EAAOC,MAAP,CAAD,MAAqB;AACvDL,MAAAA,IAAI,EAAE,YADiD;AAEvDC,MAAAA,QAAQ,EAAE,CACR;AACED,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,QAAQ,EAAE,CACR;AACED,UAAAA,IAAI,EAAE,MADR;AAEEM,UAAAA,GAAG,EAAG,QAAOD,MAAO,EAFtB;AAGEE,UAAAA,KAAK,EAAE,IAHT;AAIEN,UAAAA,QAAQ,EAAE,CACR;AACED,YAAAA,IAAI,EAAE,MADR;AAEEQ,YAAAA,KAAK,EAAEJ;AAFT,WADQ;AAJZ,SADQ;AAFZ,OADQ;AAF6C,KAArB,CAA1B;AAFC,GAAb;AAyBA,SAAOL,IAAP;AACD;;AAED,SAASU,MAAT,CAAgBhB,IAAhB,EAAsB;AACpB,SAAOA,IAAI,CAACO,IAAL,KAAc,MAArB;AACD;;AAEM,SAASU,WAAT,CAAqBnB,KAArB,EAA4BH,IAA5B,EAAkC;AACvC,QAAMuB,GAAG,GAAG,2BAAIvB,IAAJ,EAAUK,IAAI,IAAI;AAC5B,QAAIgB,MAAM,CAAChB,IAAD,CAAV,EAAkB;AAChB,YAAMmB,EAAE,GAAI,OAAMrB,KAAK,CAAC,gCAASE,IAAT,CAAD,CAAiB,EAAxC;AAEA,aAAO,EACL,GAAGA,IADE;AAELoB,QAAAA,IAAI,EAAE,EACJ,GAAGpB,IAAI,CAACoB,IADJ;AAEJC,UAAAA,WAAW,EAAE;AACXF,YAAAA;AADW,WAFT;AAKJA,UAAAA;AALI;AAFD,OAAP;AAUD;;AAED,WAAOnB,IAAP;AACD,GAjBW,CAAZ;AAmBA,SAAOkB,GAAP;AACD","sourcesContent":["import toString from 'mdast-util-to-string'\nimport visit from 'unist-util-visit'\nimport map from 'unist-util-map'\n\nexport const createMarks = tree => createList(parseMarks(tree))\n\nexport function parseMarks(tree) {\n  // Create map of marks to easily reference them by\n  // number later. Allows duplicate text marks, and\n  // avoids hashing text values.\n  const marks = {}\n  let counter = 1\n\n  visit(tree, 'mark', node => {\n    marks[toString(node)] = counter\n    counter++\n  })\n\n  return marks\n}\n\nexport function hasMarks(marks) {\n  return Object.keys(marks).length > 0\n}\n\nexport function createMarksList(marks) {\n  const list = {\n    type: 'paragraph',\n    children: Object.entries(marks).map(([mark, number]) => ({\n      type: 'blockquote',\n      children: [\n        {\n          type: 'paragraph',\n          children: [\n            {\n              type: 'link',\n              url: `#mark${number}`,\n              title: null,\n              children: [\n                {\n                  type: 'text',\n                  value: mark\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }))\n  }\n\n  return list\n}\n\nfunction isMark(node) {\n  return node.type === 'mark'\n}\n\nexport function withMarkIds(marks, tree) {\n  const res = map(tree, node => {\n    if (isMark(node)) {\n      const id = `mark${marks[toString(node)]}`\n\n      return {\n        ...node,\n        data: {\n          ...node.data,\n          hProperties: {\n            id\n          },\n          id\n        }\n      }\n    }\n\n    return node\n  })\n\n  return res\n}\n"],"file":"marks.js"}